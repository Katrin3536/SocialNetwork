{"version":3,"file":"static/js/913.0a812729.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/profileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/profile-selectors.ts","components/Profile/ProfileContainer.tsx","components/common/formsControl/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/formsControl/FormsControls.module.css?a161"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2XdJx\",\"picture\":\"ProfileInfo_picture__E5rTG\",\"mainPhoto\":\"ProfileInfo_mainPhoto__XfMvC\",\"contact\":\"ProfileInfo_contact__5-BmK\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks:React.FC<ProfileStatusType> = (props ) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(()=>{\r\n       setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n       setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {Input, Textarea} from '../../../common/formsControl/FormsControls';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport s from '../../../common/formsControl/FormsControls.module.css';\r\n\r\nexport type ProfileDataFormType = {\r\n    fullName: string,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType>> = ({handleSubmit, error}) => {\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n        <div>\r\n            <b>Full name:</b>: {<Field component={Input} validate={[]} name={'fullName'} placeholder={'Full name'}/>}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>: {<Field component={Input} type={'checkbox'} validate={[]} name={'lookingForAJob'}\r\n                                               placeholder={'Looking for a job'}/>}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills:</b>:{<Field component={Textarea} validate={[]} name={'lookingForAJobDescription'}\r\n                                                   placeholder={'My professional skills'}/>}\r\n        </div>\r\n        <div>\r\n            {/*    <b>Contacts:</b>: {Object.entries(profile.contacts).map(([key, value]) => {*/}\r\n            {/*    return <Contacts key={key} contactTitle={key} contactValue={value}/>;*/}\r\n            {/*})}*/}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b>: {<Field component={Textarea} validate={[]} name={'aboutMe'}\r\n                                      placeholder={'About me'}/>}\r\n        </div>\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n    </form>;\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport picture from '../../../assets/images/Cappadocia_2.jpg';\r\nimport {Preloader} from '../../common/preloader/Preloader';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport photo from '../../../assets/images/avatarIcon.jpg';\r\nimport ProfileDataForm, {ProfileDataFormType} from './profileDataForm/ProfileDataForm';\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void;\r\n    isOwner: boolean;\r\n    savePhoto: (value: File) => void;\r\n    saveProfile: (fullName: string,\r\n                  lookingForAJob: boolean,\r\n                  lookingForAJobDescription: string,\r\n                  aboutMe: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}): JSX.Element => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n    const goToEditMode = () => {\r\n      setEditMode(true)\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData.fullName, formData.lookingForAJob, formData.lookingForAJobDescription, formData.aboutMe);\r\n        setEditMode(false)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.picture} src={picture}/>\r\n                <div className={s.descriptionBlock}>\r\n\r\n                    <img src={profile.photos.large || photo} className={s.mainPhoto}/>\r\n                    {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                    {editMode ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit}/>: <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode}/> }\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type ProfileDataType = {\r\n    profile:ProfileType,\r\n    isOwner:boolean,\r\n    goToEditMode:()=>void\r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataType> = ({profile, isOwner,goToEditMode}) => {\r\n    return <div>\r\n        { isOwner && <div>\r\n            <button onClick={goToEditMode}>Edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name:</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills:</b>:{profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>Contacts:</b>: {Object.entries(profile.contacts).map(([key, value]) => {\r\n            return <Contacts key={key} contactTitle={key} contactValue={value}/>;\r\n        })}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b>: {profile.aboutMe}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport type ContactType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\n\r\nconst Contacts: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>:{contactValue}</div>;\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__3e4Ds\",\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+LDvX\",\"posts\":\"Post_posts__KH5L1\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport picture from '../../../../assets/images/cat.jpg';\r\n\r\ntype PostType = {\r\n    message: string;\r\n    likeCount: number;\r\n    deletePost:()=>void\r\n}\r\n\r\nconst Post = (props:PostType): JSX.Element => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img src={picture}/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like{props.likeCount}</span>\r\n                </div>\r\n                <button onClick={props.deletePost}>Delete post</button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Post;","import {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form';\r\nimport {Textarea} from '../../../common/formsControl/FormsControls';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nexport type FormDataType={\r\n    newPostText: string;\r\n}\r\nlet maxLength30 =maxLengthCreator(30)\r\n\r\nexport const AddNewPostForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n   const dispatch = useDispatch()\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field name={'newPostText'} component={Textarea} validate={[required, maxLength30]}\r\n                           placeholder={'Post message'} onClick={()=>dispatch(reset('profileAddNewPostForm'))}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<FormDataType>({form:'profileAddNewPostForm'})(AddNewPostForm)\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport {MyPostType} from './MyPostsContainer';\r\nimport {AddNewPostFormRedux, FormDataType} from './AddNewPostForm/AddNewPostForm';\r\n\r\nconst MyPosts = React.memo((props: MyPostType): JSX.Element => {\r\n\r\n    let postElement: JSX.Element[] = props.postData.map(post => <Post key={post.id} message={post.message}\r\n                                                                      likeCount={post.likeCount} deletePost={()=>props.deletePost(post.id)}/>);\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport {addPostActionCreator, deletePostActionCreator, PostDataType,} from '../../../redux/profile-reducer';\r\nimport {ReducerType} from '../../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\n\r\nexport type mapStateToPropsType = {\r\n    postData: PostDataType[],\r\n\r\n\r\n}\r\n\r\nexport type mapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void,\r\n    deletePost:(idPost:number)=>void\r\n}\r\n\r\nexport type MyPostType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nlet mapStateToProps = (state: ReducerType): mapStateToPropsType => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): { deletePost: (id: number) => void; addPost: (newPostText: string) => void } => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n        deletePost: (idPost:number) => {\r\n            dispatch(deletePostActionCreator(idPost));\r\n        }\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect<mapStateToPropsType, mapDispatchToPropsType, {}, ReducerType>(mapStateToProps, mapDispatchToProps))(MyPosts);\r\n// const MyPostsContainer = connect<mapStateToPropsType,mapDispatchToPropsType,{},ReducerType >(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n// export default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\nexport type PropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus:(status: string)=>void;\r\n    isOwner:boolean;\r\n    savePhoto:(value:File)=>void;\r\n    saveProfile: (fullName: string,\r\n                  lookingForAJob: boolean,\r\n                  lookingForAJobDescription: string,\r\n                  aboutMe: string) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n           <ProfileInfo profile={props.profile} saveProfile = {props.saveProfile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import {ReducerType} from './redux-store';\r\n\r\nexport const getProfile = (state: ReducerType) => {\r\n    return state.profilePage.profile;\r\n};\r\n\r\nexport const getStatus = (state: ReducerType) => {\r\n    return state.profilePage.status;\r\n};\r\n\r\nexport const getId = (state: ReducerType) => {\r\n    return state.auth.id;\r\n};\r\n\r\nexport const getIsAuth = (state: ReducerType) => {\r\n    return state.auth.isAuth;\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {ReducerType} from '../../redux/redux-store';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getUserProfileTC,\r\n    ProfileType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    setStatusTC,\r\n    updateStatusTC\r\n} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {Preloader} from '../common/preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {getId, getIsAuth, getProfile, getStatus} from '../../redux/profile-selectors';\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    isAuth: boolean,\r\n    id: number | null\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void,\r\n    setStatus: (userId: number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile:(fullName: string,\r\n                 lookingForAJob: boolean,\r\n                 lookingForAJobDescription: string,\r\n                 aboutMe: string) => void\r\n}\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport type ProfileContainerPropsType = OwnPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, ReducerType> {\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.id as number;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.setStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<ReducerType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (!this.props.profile)\r\n            ? <Preloader/>\r\n            : <div>\r\n                <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}\r\n                         isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto} saveProfile={this.props.saveProfile}/>\r\n            </div>;\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state: ReducerType): MapStateToPropsType => ({\r\n    profile: getProfile(state),\r\n    status: getStatus(state),\r\n    id: getId(state),\r\n    isAuth: getIsAuth(state),\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, ReducerType>(\r\n        mapStateToProps,\r\n        {\r\n            getUserProfile: getUserProfileTC,\r\n            setStatus: setStatusTC,\r\n            updateStatus: updateStatusTC,\r\n            savePhoto: savePhotoTC,\r\n            saveProfile: saveProfileTC\r\n        }\r\n    ),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport s from './FormsControls.module.css';\r\n\r\ntype DefaultPropsType = React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype TextareaType = {\r\n    input: DefaultPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputType = {\r\n    input: DefaultInputPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Input: React.FC<InputType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","export const required = (value:string) => {\r\n    if(value)  return undefined\r\n\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator =(maxLength: number)=> (value:string) => {\r\n    if(value.length>maxLength)  return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__2E-M1\",\"error\":\"FormsControls_error__OxiLB\",\"formSummaryError\":\"FormsControls_formSummaryError__gypjP\"};"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","reduxForm","form","handleSubmit","error","onSubmit","Field","component","Input","validate","name","placeholder","type","Textarea","className","s","ProfileData","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","Object","entries","contacts","map","key","Contacts","contactTitle","contactValue","aboutMe","savePhoto","saveProfile","Preloader","src","picture","photos","large","photo","target","files","initialValues","formData","message","likeCount","deletePost","maxLength30","maxLengthCreator","AddNewPostFormRedux","dispatch","useDispatch","required","reset","React","postElement","postData","post","id","values","addPost","newPostText","compose","connect","state","profilePage","addPostActionCreator","idPost","deletePostActionCreator","MyPosts","MyPostsContainer","getProfile","getStatus","getId","auth","getIsAuth","isAuth","ProfileContainer","userId","this","match","params","history","push","getUserProfile","refreshProfile","prevProps","prevState","getUserProfileTC","setStatusTC","updateStatusTC","savePhotoTC","saveProfileTC","withRouter","input","meta","hasError","touched","maxLength","length"],"sourceRoot":""}