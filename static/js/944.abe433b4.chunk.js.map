{"version":3,"file":"static/js/944.abe433b4.chunk.js","mappings":"0NAyCMA,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,EAzBsC,SAAC,GAA0B,IAAzBE,EAAwB,EAAxBA,aAAaC,EAAW,EAAXA,MACxE,OACI,kBAAMC,SAAUF,EAAhB,WACQ,qDACI,cAAGG,KAAM,wCACNC,OAAQ,SADX,uBAIJ,oEACA,sDACA,2CACJ,0BAAK,SAAC,IAAD,CAAOC,UAAWC,EAAAA,EAAOC,SAAU,CAACC,EAAAA,GAAWC,KAAM,QAASC,YAAa,aAChF,0BAAK,SAAC,IAAD,CAAOL,UAAWC,EAAAA,EAAOK,KAAK,WAAWJ,SAAU,CAACC,EAAAA,GAAWC,KAAM,WAC9DC,YAAa,gBACzB,4BAAK,SAAC,IAAD,CAAOL,UAAWC,EAAAA,EAAOG,KAAM,aAAcE,KAAK,aAAvD,iBACCV,IAAS,gBAAKW,UAAWC,EAAAA,EAAAA,iBAAhB,SACLZ,KAEL,0BACI,8CAuChB,WAAea,EAAAA,EAAAA,KAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,cAIuE,CAACC,MAAOC,EAAAA,IAA9G,EA/BuC,SAAC,GAAqB,IAApBD,EAAmB,EAAnBA,MAIrC,OAJwD,EAAZH,QAKjC,SAAC,KAAD,CAAUK,GAAI,cAElB,4BACH,mCACA,SAACxB,EAAD,CAAgBK,SARH,SAACoB,GACdH,EAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,uKChC7CC,EAAmC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,GAAW,YACnEC,EAAWF,EAAKG,SAAWH,EAAK3B,MACtC,OACI,iBAAKW,UAAWC,EAAAA,EAAAA,YAAgB,KAAOiB,EAAWjB,EAAAA,EAAAA,MAAU,IAA5D,WACI,0BACI,uCAAcc,GAAUE,MAE3BC,IAAY,0BAAOF,EAAK3B,YAgBxBK,EAA6B,SAAC,GAA6B,IAA5BqB,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,GAAW,YAC7DC,EAAWF,EAAKG,SAAWH,EAAK3B,MACtC,OACI,iBAAKW,UAAWC,EAAAA,EAAAA,YAAgB,KAAOiB,EAAWjB,EAAAA,EAAAA,MAAU,IAA5D,WACI,0BACI,oCAAWc,GAAUE,MAExBC,IAAY,0BAAOF,EAAK3B,a,4EC3C9B,IAAMO,EAAW,SAACwB,GACrB,IAAGA,EAEL,MAAO,qBAGIC,EAAkB,SAACC,GAAD,OAAsB,SAACF,GAClD,GAAGA,EAAMG,OAAOD,EAAY,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCNhC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.tsx","components/common/formsControl/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/formsControl/FormsControls.module.css?a161"],"sourcesContent":["import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/formsControl/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {loginTC} from '../../redux/auth-reducer';\r\nimport {ReducerType} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport s from '../common/formsControl/FormsControls.module.css';\r\n\r\nexport type FormDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit,error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}> here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            <div><Field component={Input} validate={[required]} name={'email'} placeholder={'email'}/></div>\r\n            <div><Field component={Input} type=\"password\" validate={[required]} name={'password'}\r\n                        placeholder={'Password'}/></div>\r\n            <div><Field component={Input} name={'rememberMe'} type=\"checkbox\"/>remember me</div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\nconst Login:React.FC<LoginPropsType> = ({login, isAuth}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe);\r\n    };\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>;\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>;\r\n};\r\n\r\ntype mapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean,\r\n    captchaUrl:string|null\r\n}\r\n\r\ntype LoginPropsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nconst mapStateToProps = (state: ReducerType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    };\r\n};\r\n\r\nexport default connect<mapStateToPropsType, mapDispatchToPropsType, {}, ReducerType>(mapStateToProps, {login: loginTC})(Login);\r\n\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport s from './FormsControls.module.css';\r\n\r\ntype DefaultPropsType = React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype TextareaType = {\r\n    input: DefaultPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputType = {\r\n    input: DefaultInputPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Input: React.FC<InputType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","export const required = (value:string) => {\r\n    if(value)  return undefined\r\n\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator =(maxLength: number)=> (value:string) => {\r\n    if(value.length>maxLength)  return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__2E-M1\",\"error\":\"FormsControls_error__OxiLB\",\"formSummaryError\":\"FormsControls_formSummaryError__gypjP\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","href","target","component","Input","validate","required","name","placeholder","type","className","s","connect","state","isAuth","auth","captchaUrl","login","loginTC","to","formData","email","password","rememberMe","Textarea","input","meta","props","hasError","touched","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}