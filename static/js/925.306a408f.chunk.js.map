{"version":3,"file":"static/js/925.306a408f.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/formsControl/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/formsControl/FormsControls.module.css?a161"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__H5v5+\",\"dialog\":\"Dialogs_dialog__ymoD5\",\"dialogsItem\":\"Dialogs_dialogsItem__0HCiw\",\"active\":\"Dialogs_active__D8u2D\",\"messages\":\"Dialogs_messages__iNOj8\",\"message\":\"Dialogs_message__k2TLP\"};","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogsItemType = {\r\n    name: string,\r\n    id: number,\r\n    ava: string\r\n}\r\n\r\nconst DialogsItem = (props: DialogsItemType): JSX.Element => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src={props.ava}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>);\r\n};\r\n\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype MessageProps = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageProps): JSX.Element => {\r\n    return <div className={s.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;","import {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControl/FormsControls';\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50]} name={'newMessageBody'}\r\n                       placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogsType} from './DialogsContainer';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {AddMessageFormRedux, FormDataType} from './AddMessageForm/AddMessageForm';\r\n\r\n\r\nconst Dialogs = React.memo((props: DialogsType): JSX.Element => {\r\n\r\n    let dialogsItemElements: JSX.Element[] = props.dialogPage.dialogs.map(dialog => <DialogsItem key={dialog.id}\r\n                                                                                                 name={dialog.name}\r\n                                                                                                 id={dialog.id}\r\n                                                                                                 ava={dialog.ava}/>);\r\n    let messageItemElement: JSX.Element[] = props.dialogPage.messages.map(message => <Message key={message.id}\r\n                                                                                              message={message.message}/>);\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsItemElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageItemElement}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nexport default Dialogs;\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {ReducerType} from '../redux/redux-store';\r\n\r\nexport type MapStateToPropsRedirectType = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsRedirect = (state: ReducerType): MapStateToPropsRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsRedirectType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) return <Redirect to='/login'/>;\r\n        return <Component {...restProps as T}/>;\r\n    };\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React from 'react';\r\nimport {DialogPageType, sendMessageActionCreator} from '../../redux/dialog-reducer';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {ReducerType} from '../../redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogPage: DialogPageType,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage:(newMessageBody:string)=>void\r\n}\r\n\r\nexport type DialogsType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nlet mapStateToProps = (state:ReducerType): mapStateToPropsType=> {\r\n    return {\r\n        dialogPage:state.dialogPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody:string)=> {\r\n          dispatch(sendMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<mapStateToPropsType, mapDispatchToPropsType, {},ReducerType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport s from './FormsControls.module.css';\r\n\r\ntype DefaultPropsType = React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype TextareaType = {\r\n    input: DefaultPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputType = {\r\n    input: DefaultInputPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Input: React.FC<InputType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","export const required = (value:string) => {\r\n    if(value)  return undefined\r\n\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator =(maxLength: number)=> (value:string) => {\r\n    if(value.length>maxLength)  return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__2E-M1\",\"error\":\"FormsControls_error__OxiLB\",\"formSummaryError\":\"FormsControls_formSummaryError__gypjP\",\"loginDesc\":\"FormsControls_loginDesc__wIc7Z\",\"form\":\"FormsControls_form__-Qx8s\",\"login\":\"FormsControls_login__7-5+7\",\"checkbox\":\"FormsControls_checkbox__yCq-O\"};"],"names":["props","path","id","className","s","src","ava","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","React","dialogsItemElements","dialogPage","dialogs","map","dialog","messageItemElement","messages","values","sendMessage","newMessageBody","mapStateToPropsRedirect","state","isAuth","auth","compose","connect","dispatch","sendMessageActionCreator","Component","restProps","Dialogs","input","meta","hasError","touched","error","Input","value","maxLength","length"],"sourceRoot":""}