{"version":3,"file":"static/js/541.ef9e9105.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/profile-selectors.ts","components/Profile/ProfileContainer.tsx","components/common/formsControl/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/formsControl/FormsControls.module.css?a161"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2XdJx\",\"picture\":\"ProfileInfo_picture__E5rTG\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks:React.FC<ProfileStatusType> = (props ) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect(()=>{\r\n       setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n       setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport picture from '../../../assets/images/Cappadocia_2.jpg';\r\nimport {Preloader} from '../../common/preloader/Preloader';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({profile, status, updateStatus}): JSX.Element => {\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.picture} src={picture}/>\r\n                <div className={s.descriptionBlock}>\r\n                    <img src={profile.photos.large}/>\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__3e4Ds\",\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+LDvX\",\"posts\":\"Post_posts__KH5L1\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport picture from '../../../../assets/images/cat.jpg';\r\n\r\ntype PostType = {\r\n    message: string;\r\n    likeCount: number;\r\n    deletePost:()=>void\r\n}\r\n\r\nconst Post = (props:PostType): JSX.Element => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img src={picture}/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like{props.likeCount}</span>\r\n                </div>\r\n                <button onClick={props.deletePost}>Delete post</button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Post;","import {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form';\r\nimport {Textarea} from '../../../common/formsControl/FormsControls';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nexport type FormDataType={\r\n    newPostText: string;\r\n}\r\nlet maxLength30 =maxLengthCreator(30)\r\n\r\nexport const AddNewPostForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n   const dispatch = useDispatch()\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field name={'newPostText'} component={Textarea} validate={[required, maxLength30]}\r\n                           placeholder={'Post message'} onClick={()=>dispatch(reset('profileAddNewPostForm'))}/>\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<FormDataType>({form:'profileAddNewPostForm'})(AddNewPostForm)\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport {MyPostType} from './MyPostsContainer';\r\nimport {AddNewPostFormRedux, FormDataType} from './AddNewPostForm/AddNewPostForm';\r\n\r\nconst MyPosts = React.memo((props: MyPostType): JSX.Element => {\r\n\r\n    let postElement: JSX.Element[] = props.postData.map(post => <Post key={post.id} message={post.message}\r\n                                                                      likeCount={post.likeCount} deletePost={()=>props.deletePost(post.id)}/>);\r\n\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport {addPostActionCreator, deletePostActionCreator, PostDataType,} from '../../../redux/profile-reducer';\r\nimport {ReducerType} from '../../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\n\r\nexport type mapStateToPropsType = {\r\n    postData: PostDataType[],\r\n\r\n\r\n}\r\n\r\nexport type mapDispatchToPropsType = {\r\n    addPost: (newPostText:string) => void,\r\n    deletePost:(idPost:number)=>void\r\n}\r\n\r\nexport type MyPostType = mapDispatchToPropsType & mapStateToPropsType\r\n\r\nlet mapStateToProps = (state: ReducerType): mapStateToPropsType => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): { deletePost: (id: number) => void; addPost: (newPostText: string) => void } => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n        deletePost: (idPost:number) => {\r\n            dispatch(deletePostActionCreator(idPost));\r\n        }\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(connect<mapStateToPropsType, mapDispatchToPropsType, {}, ReducerType>(mapStateToProps, mapDispatchToProps))(MyPosts);\r\n// const MyPostsContainer = connect<mapStateToPropsType,mapDispatchToPropsType,{},ReducerType >(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n// export default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\nexport type PropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    updateStatus:(status: string)=>void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n           <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import {ReducerType} from './redux-store';\r\n\r\nexport const getProfile = (state: ReducerType) => {\r\n    return state.profilePage.profile;\r\n};\r\n\r\nexport const getStatus = (state: ReducerType) => {\r\n    return state.profilePage.status;\r\n};\r\n\r\nexport const getId = (state: ReducerType) => {\r\n    return state.auth.id;\r\n};\r\n\r\nexport const getIsAuth = (state: ReducerType) => {\r\n    return state.auth.isAuth;\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {ReducerType} from '../../redux/redux-store';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getUserProfileTC, ProfileType, setStatusTC, updateStatusTC} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {Preloader} from '../common/preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {getId, getIsAuth, getProfile, getStatus} from '../../redux/profile-selectors';\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    isAuth:boolean,\r\n    id: number | null\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void,\r\n    setStatus:(userId: number)=>void,\r\n    updateStatus:(status: string)=>void\r\n\r\n}\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport type ProfileContainerPropsType = OwnPropsType & RouteComponentProps<PathParamsType>\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, ReducerType> {\r\n    componentDidMount() {\r\n        let userId= +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.id as number\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.setStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (!this.props.profile)\r\n            ? <Preloader/>\r\n            : <div>\r\n                <Profile profile={this.props.profile} status={this.props.status} updateStatus = {this.props.updateStatus}/>\r\n            </div>;\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state: ReducerType): MapStateToPropsType => ({\r\n    profile: getProfile(state),\r\n    status: getStatus(state),\r\n    id:getId(state),\r\n    isAuth: getIsAuth(state),\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, ReducerType>(\r\n        mapStateToProps,\r\n        {\r\n            getUserProfile: getUserProfileTC,\r\n            setStatus: setStatusTC,\r\n            updateStatus: updateStatusTC}\r\n    ),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport s from './FormsControls.module.css';\r\n\r\ntype DefaultPropsType = React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n\r\ntype TextareaType = {\r\n    input: DefaultPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <textarea {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputType = {\r\n    input: DefaultInputPropsType\r\n    meta: {\r\n        error: string,\r\n        touched: string\r\n    }\r\n}\r\n\r\nexport const Input: React.FC<InputType> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                <input {...input}{...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","export const required = (value:string) => {\r\n    if(value)  return undefined\r\n\r\n  return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator =(maxLength: number)=> (value:string) => {\r\n    if(value.length>maxLength)  return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__2E-M1\",\"error\":\"FormsControls_error__OxiLB\",\"formSummaryError\":\"FormsControls_formSummaryError__gypjP\"};"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","profile","className","s","src","picture","photos","large","Preloader","message","likeCount","onClick","deletePost","maxLength30","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","dispatch","useDispatch","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","reset","React","postElement","postData","map","post","id","values","addPost","newPostText","compose","connect","state","profilePage","addPostActionCreator","idPost","deletePostActionCreator","MyPosts","MyPostsContainer","getProfile","getStatus","getId","auth","getIsAuth","isAuth","ProfileContainer","userId","this","match","params","history","push","getUserProfile","getUserProfileTC","setStatusTC","updateStatusTC","withRouter","input","meta","hasError","touched","error","Input","maxLength","length"],"sourceRoot":""}